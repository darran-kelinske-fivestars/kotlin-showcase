apply plugin: 'base'

clean.doLast {
  file("platforms/android/assets/www").deleteDir()
  file("platforms/android/build").deleteDir()
  file("www/css").deleteDir()
  file("www/js").deleteDir()
  file("www/webclient").deleteDir()
  file("www/index.html").delete()
  file("www/config.xml").delete()
  file("www/webclient.js").delete()
  file("www/webclient.js.map").delete()
  file("www/webclient.meta.js").delete()
  file("www/lib").deleteDir()
}

task copyWebClientExceptHtml(type: Copy) {
  from("${project(':webclient').projectDir}/src/main/web")
  from("${project(':webclient').projectDir}/build/classes/main")
  include("**/*")
  exclude("webclient")
  exclude("index.html")
  into("www")
  rename { String fileName -> fileName.replace("webclient.js", "js/index.js") }
}

copyWebClientExceptHtml.dependsOn(clean)

// kotlin.js and Yested.js must exist.  Follow the instructions in ../README.md to generate them.
copyWebClientExceptHtml.doFirst {
  assert file("${project(':webclient').projectDir}/build/classes/main/lib/kotlin.js").exists()
  assert file("${project(':webclient').projectDir}/build/classes/main/lib/Yested.js").exists()
}

// Copy webclient files
// Automatically copies files from the webclient module to this module.
// This allows sharing code between the two modules and enables using KotlinJS

task copyWebClientHtml(type: Copy) {
  from("${project(':webclient').projectDir}/src/main/web")
  include("index.html")
  into("www")
  filter { String line -> line
    .replaceAll("<!--CORDOVA (.*?)-->", "\$1")
    .replace("../../build/classes/main/", "")
    .replace("webclient.", "js/index.") }
}

task copyIcon(type: Copy) {
  from("resources")
  include("logo.png")
  into("www/img")
}
task copyConfigForGenIcon(type: Copy) {
  from(".")
  include("config.xml")
  into("www")
  filter { String line -> line.replaceAll("www/", "") }
}
task genIcon(type:Exec) {
  workingDir '.'
  commandLine 'cordova-gen-icon'
}
genIcon.doFirst {
  if (!file("www/config.xml").exists()) throw new IllegalArgumentException("File www/config.xml didn't get added")
}
genIcon.dependsOn(copyIcon)
genIcon.dependsOn(copyConfigForGenIcon)
genIcon.doLast {
  file("www/config.xml").delete()
}

task prepareMobile
prepareMobile.dependsOn(copyWebClientExceptHtml)
prepareMobile.dependsOn(copyWebClientHtml)
prepareMobile.doLast {
  assert file("www/lib/kotlin.js").exists()
  assert file("www/lib/Yested.js").exists()
  assert file("www/js/index.js").exists()
  assert file("www/css/index.css").exists()
  assert file("www/index.html").exists()
}

task makeZip(type: Zip) {
   from './'
   exclude 'build/'
   exclude 'publish-folder/'
   exclude 'platforms/android/build/'
   exclude 'platforms/android/gradle/'
   exclude 'platforms/android/platform_www/'
   exclude 'platforms/android/src/'
   exclude 'plugins/'
   exclude 'node_modules/'
   exclude 'hooks/before_prepare/'
   archiveName "PhoneGap.zip"
   destinationDir(buildDir)
}
makeZip.doFirst {
  assert file("config.xml").exists()
}
makeZip.dependsOn(prepareMobile)

task afterPrepare(type: Copy) {
  from("platforms/android")
  include("AndroidManifest.xml")
  into("${buildDir}")
  filter { String line -> line
    .replaceAll("<uses-permission android:name=.+INTERNET.+/>", "")
  }
}
afterPrepare.doLast {
  copy {
    from("${buildDir}");
    include "AndroidManifest.xml";
    into("platforms/android")
  }
}
